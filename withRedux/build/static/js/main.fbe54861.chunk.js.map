{"version":3,"sources":["action-type.js","actions.js","Table.js","utils.js","Section.js","SectionList.js","App.js","sagas.js","reducer.js","index.js"],"names":["ADD_SECTION","REMOVE_SECTION","START_DISCUSS","STOP_DISCUSS","TICK_NEXT_TIME","actionBuilder","type","payload","BaseColor","Table","styled","table","th","size","pad","n","String","padStart","timeFormatter","t","Math","floor","connect","dispatch","removeSection","id","Actions","startDiscuss","stopDiscuss","est","act","title","isDiscuss","initTime","className","Text","color","style","marginRight","padding","Stack","margin","overflow","textOverflow","whiteSpace","Meter","values","value","width","marginTop","max","background","thickness","opacity","Button","plain","animation","onClick","label","marginLeft","state","sectionList","allTime","key","adjust","map","section","reduce","a","b","colSpan","rowSpan","seq","Footer","Box","addSection","updateTitle","useState","updateEst","Header","align","marginBottom","Clock","basis","TextInput","placeholder","onChange","event","target","Select","options","option","Number","paddingTop","icon","Add","delay","ms","Promise","resolve","setTimeout","backupData","storeData","select","localStorage","setItem","JSON","stringify","tickLoop","put","InitializeState","sagaMiddleware","createSagaMiddleware","store","createStore","action","undefined","saveData","getItem","parse","uuidV4","filter","applyMiddleware","run","all","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbe54861.chunk.js","sourcesContent":["export const ADD_SECTION = \"add section\";\nexport const REMOVE_SECTION = \"remove section\";\nexport const START_DISCUSS = \"start discuss\";\nexport const STOP_DISCUSS = \"stop discuss\";\nexport const TICK_NEXT_TIME = \"tick next time\";\n","import * as Actions from \"./action-type\";\n\nconst actionBuilder = (type, payload = {}) => ({\n  type,\n  payload: { ...payload }\n});\n\nexport const addSection = (title, est) =>\n  actionBuilder(Actions.ADD_SECTION, { title, est });\n\nexport const removeSection = id =>\n  actionBuilder(Actions.REMOVE_SECTION, { id });\n\nexport const tickNextTime = () => actionBuilder(Actions.TICK_NEXT_TIME);\n\nexport const startDiscuss = id => actionBuilder(Actions.START_DISCUSS, { id });\n\nexport const stopDiscuss = id => actionBuilder(Actions.STOP_DISCUSS, { id });\n","import styled from \"styled-components\";\n\nconst BaseColor = \"#ddd\";\nconst HeaderColor = \"#f0f0f0\";\n\nexport const Table = styled.table`\n  table-layout: fixed;\n  width: 100%;\n  border-collapse: collapse;\n\n  th,\n  td {\n    padding: 12px;\n    background: white;\n    border: 1px solid ${BaseColor};\n  }\n\n  & .center {\n    text-align: center;\n  }\n\n  & thead th {\n    padding: 6px;\n    font-size: 12px;\n    font-weight: 400;\n    text-align: left;\n    background: ${HeaderColor};\n  }\n\n  & tbody td {\n    font-weight: 200;\n    padding-top: 10px;\n    padding-bottom: 10px;\n  }\n\n  & .underline {\n    border-bottom: 1px solid ${BaseColor};\n  }\n\n  @keyframes blink {\n    0% {\n      opacity: 0;\n    }\n    50% {\n      opacity: 0.5;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const TH = styled.th`\n  width: ${size => (size ? `${size}px` : \"100%\")};\n`;\n","export const pad = n => String(n).padStart(2, \"0\");\nexport const timeFormatter = t => `${pad(Math.floor(t / 60))}:${pad(t % 60)}`;\n","import React from \"react\";\nimport { Stack, Text, Button, Meter } from \"grommet\";\nimport { timeFormatter } from \"./utils\";\nimport { connect } from \"react-redux\";\nimport { removeSection, startDiscuss, stopDiscuss } from \"./actions\";\n\nfunction Section({\n  id,\n  est,\n  act,\n  title,\n  isDiscuss,\n  removeSection,\n  startDiscuss,\n  stopDiscuss\n}) {\n  const initTime = est * 60;\n  const remainingTime = () => initTime - act;\n\n  return (\n    <tr>\n      <td className=\"center\">\n        <Text color=\"gray\" style={{ marginRight: 5 }}>\n          {timeFormatter(initTime)}\n        </Text>\n      </td>\n      <td className=\"center\">\n        <Text size=\"large\" color={act <= 0 ? \"lightgray\" : \"#444\"}>\n          {timeFormatter(act)}\n        </Text>\n      </td>\n      <td style={{ padding: 0 }}>\n        <Stack>\n          <Text\n            size=\"large\"\n            style={{\n              margin: 12,\n              overflow: \"hidden\",\n              textOverflow: \"ellipsis\",\n              whiteSpace: \"nowrap\"\n            }}\n          >\n            {title}\n          </Text>\n          <Meter\n            values={[\n              {\n                value: act,\n                color: remainingTime() < 0 ? \"red\" : null\n              }\n            ]}\n            style={{ width: \"100%\", marginTop: -10 }}\n            max={initTime}\n            background=\"rgba(0,0,0,0)\"\n            thickness=\"large\"\n            opacity={0.2}\n          />\n        </Stack>\n      </td>\n      <td className=\"center\">\n        <Button\n          plain\n          size=\"small\"\n          color=\"#ccc\"\n          style={\n            isDiscuss\n              ? { color: \"black\", animation: \"blink 1s linear infinite\" }\n              : null\n          }\n          onClick={() => (isDiscuss ? stopDiscuss(id) : startDiscuss(id))}\n          label=\"Discuss\"\n        />\n        <Button\n          plain\n          size=\"small\"\n          style={{ marginLeft: 14 }}\n          label=\"···\"\n          onClick={() => removeSection(id)}\n        />\n      </td>\n    </tr>\n  );\n}\n\nexport default connect(\n  () => ({}),\n  dispatch => ({\n    removeSection: id => dispatch(removeSection(id)),\n    startDiscuss: id => dispatch(startDiscuss(id)),\n    stopDiscuss: id => dispatch(stopDiscuss(id))\n  })\n)(Section);\n","import React from \"react\";\nimport { Table } from \"./Table\";\nimport Section from \"./Section\";\nimport { connect } from \"react-redux\";\nimport { timeFormatter } from \"./utils\";\nimport { Text } from \"grommet\";\n\nfunction SectionList({ sectionList }) {\n  const allTime = (key, adjust = 1) =>\n    timeFormatter(\n      sectionList.map(section => section[key]).reduce((a, b) => a + b, 0) *\n        adjust\n    );\n\n  return (\n    <>\n      <Table>\n        <thead>\n          <tr>\n            <th className=\"center\" colSpan=\"2\" width=\"150\">\n              Time\n            </th>\n            <th className=\"underline\" rowSpan=\"2\">\n              Item\n            </th>\n            <th className=\"center underline\" rowSpan=\"2\" width=\"120\">\n              Behavior\n            </th>\n          </tr>\n          <tr className=\"underline\">\n            <th className=\"center\">Est.</th>\n            <th className=\"center\">Act.</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sectionList.map((section, seq) => (\n            <Section {...section} key={seq} />\n          ))}\n        </tbody>\n        <thead>\n          <tr className=\"underline\">\n            <th className=\"center\">\n              <Text>{allTime(\"est\", 60)}</Text>\n            </th>\n            <th className=\"center\">\n              <Text>{allTime(\"act\")}</Text>\n            </th>\n            <th className=\"underline\" colSpan=\"2\" />\n          </tr>\n        </thead>\n      </Table>\n    </>\n  );\n}\n\nexport default connect(state => ({\n  sectionList: state.sectionList\n}))(SectionList);\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { addSection } from \"./actions\";\nimport { connect } from \"react-redux\";\nimport { Header, Clock, Text, Box, Button, TextInput, Select } from \"grommet\";\nimport { Add } from \"grommet-icons\";\nimport SectionList from \"./SectionList\";\n\nconst Footer = styled(Box)`\n  padding: 20px;\n  color: #aaa;\n`;\n\nconst DefaultEst = 5;\n\nfunction App({ addSection }) {\n  let [title, updateTitle] = useState(\"\");\n  let [est, updateEst] = useState(DefaultEst);\n\n  const clearControls = () => {\n    updateTitle(\"\");\n    updateEst(DefaultEst);\n  };\n  const onChangeTitle = event => {\n    updateTitle(event.target.value);\n  };\n  const onChangeEst = ({ option }) => {\n    updateEst(Number(option));\n  };\n\n  return (\n    <>\n      <Box style={{ padding: 20 }}>\n        <Header pad=\"xsmall\" align=\"baseline\" style={{ marginBottom: 40 }}>\n          <Box style={{ width: 200 }}>\n            <Clock type=\"digital\" />\n          </Box>\n          <Box basis=\"full\">\n            <TextInput\n              value={title}\n              placeholder=\"논의 주제\"\n              onChange={onChangeTitle}\n            />\n          </Box>\n          <Box basis=\"1/4\">\n            <Select\n              options={[1, 5, 10, 15, 20, 25, 30, 40]}\n              value={est}\n              onChange={onChangeEst}\n            />\n          </Box>\n          <Box align=\"end\" style={{ width: 60, paddingTop: 5 }}>\n            <Button\n              icon={<Add />}\n              onClick={() => {\n                addSection(title, est);\n                clearControls();\n              }}\n            />\n          </Box>\n        </Header>\n        <SectionList />\n      </Box>\n      <Footer>\n        <Text size=\"xxsmall\">\n          Time Keeper © Kim mintae. All right Reserved\n        </Text>\n      </Footer>\n    </>\n  );\n}\n\nexport default connect(\n  () => {},\n  dispatch => ({\n    addSection: (title, est) => dispatch(addSection(title, est))\n  })\n)(App);\n","import { tickNextTime } from \"./actions\";\nimport { put, all, select } from \"redux-saga/effects\";\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nfunction* backupData() {\n  while (true) {\n    yield delay(1000 * 10);\n    const storeData = yield select(state => state);\n\n    localStorage.setItem(\"timekeeper\", JSON.stringify(storeData));\n  }\n}\n\nfunction* tickLoop() {\n  while (true) {\n    yield delay(1000);\n    yield put(tickNextTime());\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([tickLoop(), backupData()]);\n}\n","import * as Actions from \"./action-type\";\nimport { v4 as uuidV4 } from \"uuid\";\n\nconst InitializeState = {\n  sectionList: []\n};\n\nexport default (state, action) => {\n  if (state === undefined) {\n    const saveData = localStorage.getItem(\"timekeeper\");\n    state = saveData ? JSON.parse(saveData) : InitializeState;\n  }\n\n  switch (action.type) {\n    case Actions.ADD_SECTION:\n      return {\n        ...state,\n        sectionList: [\n          ...state.sectionList,\n          {\n            id: uuidV4(),\n            title: action.payload.title,\n            est: action.payload.est,\n            act: 0,\n            isDiscuss: false\n          }\n        ]\n      };\n    case Actions.REMOVE_SECTION:\n      return {\n        ...state,\n        sectionList: [\n          ...state.sectionList.filter(\n            section => section.id !== action.payload.id\n          )\n        ]\n      };\n    case Actions.START_DISCUSS:\n      return {\n        ...state,\n        sectionList: [\n          ...state.sectionList\n            .map(section => ({ ...section, isDiscuss: false }))\n            .map(section => {\n            if (section.id === action.payload.id) {\n              section.isDiscuss = true;\n            }\n\n            return section;\n          })\n        ]\n      };\n    case Actions.STOP_DISCUSS:\n      return {\n        ...state,\n        sectionList: [\n          ...state.sectionList.map(section => {\n            if (section.id === action.payload.id) {\n              section.isDiscuss = false;\n            }\n\n            return section;\n          })\n        ]\n      };\n    case Actions.TICK_NEXT_TIME:\n      return {\n        ...state,\n        sectionList: [\n          ...state.sectionList.map(section => {\n            if (section.isDiscuss) {\n              section.act++;\n            }\n\n            return section;\n          })\n        ]\n      };\n    default:\n      return { ...state };\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { Provider } from \"react-redux\";\nimport Sagas from \"./sagas\";\nimport reducer from \"./reducer\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(Sagas);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}